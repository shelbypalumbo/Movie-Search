{"version":3,"sources":["components/SearchForm/index.js","pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","useState","query","setQuery","movies","setMovies","SearchMovies","event","a","preventDefault","url","fetch","res","json","data","console","log","results","error","className","onSubmit","htmlFor","type","name","placeholder","value","onChange","e","target","map","movie","key","id","title","format","release_date","vote_average","vote_count","original_language","overview","alt","src","poster_path","Home","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wVAIe,SAASA,IAAS,MAELC,mBAAS,IAFJ,mBAExBC,EAFwB,KAEjBC,EAFiB,OAGHF,mBAAS,IAHN,mBAGxBG,EAHwB,KAGhBC,EAHgB,KAMzBC,EAAY,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DACnBD,EAAME,iBAEAC,EAHa,kHAGoGR,EAHpG,iDAQCS,MAAMD,GARP,cAQXE,EARW,gBASEA,EAAIC,OATN,OASXC,EATW,OAUjBC,QAAQC,IAAI,SAAUF,EAAKG,SAC3BZ,EAAUS,EAAKG,SAXE,kDAajBF,QAAQG,MAAR,MAbiB,0DAAH,sDAgBlB,OACE,oCACE,0BAAMC,UAAU,OAAOC,SAAUd,GAC/B,2BAAOa,UAAU,QAAQE,QAAQ,SAAjC,qBAGA,2BACEC,KAAK,OACLH,UAAU,cACVI,KAAK,QACLC,YAAY,gBACZC,MAAOvB,EACPwB,SAAU,SAAAC,GAAC,OAAIxB,EAASwB,EAAEC,OAAOH,UAEnC,4BAAQN,UAAU,SAASG,KAAK,UAAhC,UACS,uBAAGH,UAAU,kBAGxB,yBAAKA,UAAU,aACZf,EAAOyB,KAAI,SAAAC,GAAK,OACf,yBAAKX,UAAU,OAAOY,IAAKD,EAAME,IAC/B,wBAAIb,UAAU,eACZ,uBAAGA,UAAU,iBADf,OAESW,EAAMG,OAGf,wBAAId,UAAU,WACZ,kBAAC,IAAD,CAAQe,OAAO,gBAAgBJ,EAAMK,eAEvC,wBAAIhB,UAAU,WACZ,uBAAGA,UAAU,gBADf,eACgDW,EAAMM,aADtD,YAEYN,EAAMO,WAFlB,YAIA,wBAAIlB,UAAU,YAAYW,EAAMQ,mBAChC,2BAAIR,EAAMS,UACV,yBACEC,IAAKV,EAAMG,MAAQ,SACnBd,UAAU,aACVsB,IAAG,0DAAqDX,EAAMY,eAEhE,mCCjDGC,MAbf,WAGE,OAFA5B,QAAQC,IAAI,QAGV,oCACE,wBAAIG,UAAU,aAAd,uBAEA,yBAAKA,UAAU,aACb,kBAACnB,EAAD,SCEO4C,MAVf,WAEE,OADA7B,QAAQC,IAAI,SAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,UAAWH,IAC3B,kBAAC,IAAD,CAAOE,KAAK,QAAQC,UAAWH,MCGjBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLH,QAAQG,MAAMA,EAAM8C,c","file":"static/js/main.5ff1b696.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Moment from \"react-moment\";\nimport \"./style.css\";\n\nexport default function Search() {\n  //useState manage state in a functional component\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]); //initial state is and empty array []\n\n  //stae for movies and update the state appropriately\n  const SearchMovies = async event => {\n    event.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=6d782442cfa371175a8b9802b7945c3a&language=en-US&query=${query}&page=1&include_adult=false`;\n\n    //Returns a promise to handle it we use async await to wait for code to finish and then return the data\n    try {\n      // Try this lblock of code, if it doesn't work, throw an error\n      const res = await fetch(url);\n      const data = await res.json(); //Returns a promise as well, returns the data we fetched.\n      console.log(\"movies\", data.results);\n      setMovies(data.results);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <>\n      <form className=\"form\" onSubmit={SearchMovies}>\n        <label className=\"label\" htmlFor=\"query\">\n          Search Movie:&nbsp;\n        </label>\n        <input\n          type=\"text\"\n          className=\"movie-input\"\n          name=\"query\"\n          placeholder=\"i.e Cape Fear\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n        />\n        <button className=\"button\" type=\"submit\">\n          Search <i className=\"fas fa-film\"></i>\n        </button>\n      </form>\n      <div className=\"card-list\">\n        {movies.map(movie => (\n          <div className=\"card\" key={movie.id}>\n            <h1 className=\"movie-title\">\n              <i className=\"fas fa-video\"></i>\n              &nbsp;{movie.title}\n            </h1>\n\n            <h2 className=\"release\">\n              <Moment format=\"MMM DD, YYYY\">{movie.release_date}</Moment>\n            </h2>\n            <h2 className=\"ratings\">\n              <i className=\"fas fa-star\"></i>&nbsp; Rating {movie.vote_average}\n              /10 from {movie.vote_count} Ratings\n            </h2>\n            <h4 className=\"language\">{movie.original_language}</h4>\n            <p>{movie.overview}</p>\n            <img\n              alt={movie.title + \"poster\"}\n              className=\"card-image\"\n              src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n            />\n            <hr />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\nimport Search from \"../../components/SearchForm\";\n\nfunction Home() {\n  console.log(\"home\");\n\n  return (\n    <>\n      <h1 className=\"title red\"> React Movie Search</h1>\n\n      <div className=\"container\">\n        <Search />\n      </div>\n    </>\n  );\n}\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  console.log(\"hello\");\n  return (\n    <Router>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/Home\" component={Home} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}